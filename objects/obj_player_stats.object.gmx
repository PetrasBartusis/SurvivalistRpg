<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the player's stats
hp = 5;
maxhp = hp;
stamina = 10;
maxstamina = stamina;
expr = 0;
maxexpr = 3;
level = 1;
attack = 1;
status_points = 0;
draw_set_colour(c_gray);
isPaused = false;
wasLoaded = false;
//-----
Stats[STRENGTH] = 1;
Stats[AGILITY] = 1;
Stats[DEXTERITY] = 1;
Stats[VITALITY] = 1;
//---
//health bar colors
hpColor = make_color_hsv(9, 77, 100);
hpDarkColor = make_color_hsv(9, 77, 76);
staminaColor = make_color_hsv(131, 95, 100);
staminaDarkColor = make_color_hsv(131, 95, 62);
xpColor = make_color_hsv(282, 57, 100);
xpDarkColor = make_color_hsv(282, 57, 46);

// Get the player's xstart and ystart
if(instance_exists(obj_player)){
    player_xstart = obj_player.x;
    player_ystart = obj_player.y;
} else {
    player_xstart = 0;
    player_ystart = 0;
}

// Save the previous room
previous_room = room;

room_start_action = NEW_ROOM;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stamina regen alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the stats
if(hp &lt; 0){
    hp = 0;
}

// Stamina regen
if(stamina &lt; maxstamina and alarm[0] == -1){
    stamina++;
}

// Pause the game
if(obj_input.pause_key){
    if (room != rm_pause){
        player_xstart = obj_player.x;
        player_ystart = obj_player.y;
        if(instance_exists(obj_player)){
            obj_player.persistent = false;
        }
        previous_room = room;
        room_persistent = true;
        room_goto(rm_pause);
        isPaused = true;
    } else {
        isPaused = false;
        room_goto(previous_room);
    }
    //set it back to false so we dont get stuck in room loop
    obj_input.pause_key = false;
}

/// Create the inventory on screen
if(instance_exists(obj_input) and obj_input.stats_key){
    if(!instance_exists(obj_stats_gui)){
        statsDisplay = instance_create(obj_player.x, obj_player.y, obj_stats_gui);
        with(statsDisplay){
            x = sprite_get_xoffset(sprite_index);
            y = room_height - sprite_get_yoffset(sprite_index);
        }
    } else {
        instance_destroy(statsDisplay);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remember the player's start position
// Don't run this code in the pause menu
if(room == rm_pause) exit;

switch (room_start_action){
    case RETURN:
        break;
    case NEW_ROOM:
    default:
        if(instance_exists(obj_player)){
            player_xstart = obj_player.x;
            player_ystart = obj_player.y;
        }
        break;
    case LOAD:
        scr_load_game();
        
        break;
}

room_persistent = false;
room_start_action = NEW_ROOM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player's stats
if(!instance_exists(obj_inventory_gui) and 
    !instance_exists(obj_stats_gui) and !isPaused){
    draw_set_font(font0);
    draw_set_color(c_gray);
    draw_healthbar(32, 16, 192, 48, hp/maxhp * 100, hpDarkColor, hpColor, hpColor, 0, true, true);
    draw_text(34,16, "HP: " + string(hp) + "/" + string(maxhp));
    draw_healthbar(32, 48, 192, 80, stamina/maxstamina * 100, staminaDarkColor, staminaColor, staminaColor, 0, true, true);
    draw_text(34,48, "ST: " + string(stamina) + "/" + string(maxstamina));
    draw_healthbar(32, 80, 192, 112, expr/maxexpr * 100, xpDarkColor, xpColor, xpColor, 0, true, true);
    draw_text(34,80, "EXPR: " + string(expr) + "/" + string(maxexpr));
    draw_text(34,112, "LEVEL: " + string(level));
    draw_text(34,142, "X: " + string(obj_player.x));
    draw_text(34,174, "Y: " + string(obj_player.y));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
