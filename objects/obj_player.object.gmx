<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_lifeform_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
//check for more players so it wouldn't duplicate
if(instance_number(obj_player) &gt; 1) instance_destroy();
// run parent create event
event_inherited();

//physics values
spd = 3.5;
hspd = 0;
vspd = 0;
len = 0;
xaxis = 0;
yaxis = 0;
dir = 0;
image_speed = .7;
state = scr_move_state;
face = RIGHT;
movement = MOVE;
weapon_sprite = spr_sword;
in_combat = false;
weapon = instance_create(x, y, obj_weapon_draw);
weapon.visible = false;

// Create the sprite array
sprite[RIGHT, MOVE] = spr_player_right_main;
sprite[UP, MOVE] = spr_player_up_main;
sprite[LEFT, MOVE] = spr_player_left_main;
sprite[DOWN, MOVE] = spr_player_down_main;

sprite[RIGHT, ATTACK] = spr_attack_sword_right;
sprite[UP, ATTACK] = spr_attack_sword_up;
sprite[LEFT, ATTACK] = spr_attack_sword_left;
sprite[DOWN, ATTACK] = spr_attack_sword_down;

sprite[RIGHT, CURRENT_WEAPON] = spr_sword_right;
sprite[UP, CURRENT_WEAPON] = spr_sword_up;
sprite[DOWN, CURRENT_WEAPON] = spr_sword_down;
sprite[LEFT, CURRENT_WEAPON] = spr_sword_left;

sprite[RIGHT, COMBAT] = spr_attack_move_sword_right;
sprite[UP, COMBAT] = spr_attack_move_sword_up;
sprite[DOWN, COMBAT] = spr_attack_move_sword_down;
sprite[LEFT, COMBAT] = spr_attack_move_sword_left;

sprite[RIGHT, IDLE] = spr_player_idle_right;
sprite[UP, IDLE] = spr_player_idle_up;
sprite[DOWN, IDLE] = spr_player_idle_down;
sprite[LEFT, IDLE] = spr_player_idle_left;

sprite[RIGHT, IDLE_COMBAT] = spr_idle_right_sword;
sprite[UP, IDLE_COMBAT] = spr_idle_up_sword;
sprite[DOWN, IDLE_COMBAT] = spr_idle_down_sword;
sprite[LEFT, IDLE_COMBAT] = spr_idle_left_sword;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This alarm is for the dash state
state = scr_move_state;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the player in the step event
depth = -y;
script_execute(state);

// Set the correct sprite, according to the 2d array
sprite_index = sprite[face, movement];

// If the player is in combat, draw current weapon



// Check for death
if(obj_player_stats.hp &lt;= 0){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_health">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect health
with(other){
    instance_destroy();
}

// Restore player health
with(obj_player_stats){
    hp = min(hp + 5, maxhp);
    audio_play_sound(snd_expr, 6, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go through the door
if(room_exists(other.new_room)) {
    room_goto(other.new_room);
    x = other.new_x;
    y = other.new_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_expr">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect expr
with(other){
    var expr_to_add = expr;
    instance_destroy();
    audio_play_sound(snd_expr, 6, false);
}

// Level up code
with(obj_player_stats){
    expr += expr_to_add;
    if(expr &gt;= maxexpr){
        level += 1;
        expr = expr - maxexpr;
        maxexpr *= 2;
        hp += 2;
        maxhp += 2;
        stamina += 2;
        maxstamina += 2;
        magicka += 2;
        maxmagicka += 2;
        attack += 1;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change back to move state
if(state == scr_attack_state){
    state = scr_move_state;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set fixed rotation and persistence
phy_fixed_rotation = true;
persistent = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw shadow
draw_sprite(spr_shadow, image_index, x, y);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>3</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>23,43</point>
    <point>9,43</point>
    <point>9,24</point>
    <point>23,24</point>
  </PhysicsShapePoints>
</object>
